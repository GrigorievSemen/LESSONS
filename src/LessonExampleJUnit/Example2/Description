Для демонстрации основных возможностей JUnit Framework, напишем примитивный
класс на языке Java и будем над ним издеваться. Этот класс будет иметь два
метода - нахождение факториала неотрицательного числа и суммы двух чисел.
Кроме того, в экземпляре класса будет находится счетчик вызовов методов.
Теперь напишем Unit тесты. Для этого создадим класс с некоторым количеством
тестовых методов. Естественно, класс может содержать и обычные вспомогательные
методы. Чтобы runner тестов мог определить, кто есть кто, тестовые методы
необходимо помечать аннтоацией @Test.

У аннотации могут быть проставлены такие параметры:

expected - указываем какое исключение будет сгенерировано методом (см. пример ниже);
timeout - через какое время в милисекундах прекратить выполнение теста и засчитать его
 как неуспешный.
Если вы хотите указать, что определенный тест необхдимо пропустить, то пометьте
его аннотацией @Ignore. Хотя можно просто удалить аннотацию @Test.

Бывает такое, что для выполнения каждого тестового сценария вам необходим
некоторый контекст, например, заранее созданные экземпляры классов.
А после выполнения нужно освободить зарезервированные ресурсы. В этом случае вам
понадобятся аннтоации @Before и @After.
Метод, помеченный @Before будет выполняться перед каждым тестовым случаем, а метод,
помеченный @After - после каждого тестового случая.

Если же инициализацию и освобождение ресурсов нужно сделать всего один
 раз - соответственно до и после всех тестов - то используйте пару
 аннотаций @BeforeClass и @AfterClass.

 Метод calls тестирует правильность счетчика вызовов. Метод factorial проверяет
 правильность вычисления факториала для некоторых стандартных значений. Метод
 factorialNegative проверяет, что для отрицательных значений факотриала будет
 брошен IllegalArgumentException. Метод todo будет проигнорирован. Попробуйте
 убрать аннотацию @Ignore, когда будете экспериментировать с кодом.

 Метод assertTrue проверяет, является ли результат выражения верным. Некоторые
 другие методы, которые могут пригодиться:

 assertEquals - ожидаемый результат и полученный результат совпадают;
 assertNull - результатом выражения есть null;
 assertNotNull - результат выражения отличен от null;
 assertSame - ожидаемый и полученный объекты это один и тот же объект.
 fail - метод генерирует исключение AssertionError - добавляем туда, куда
 не должен дойти ход выполнения программы.
 В нашем современном мире IDE умеют находить и просто запускать тесты в
 проекте. Но что делать, если вы хотите запустить их вручную с помощью
 программного кода. Для этого можно воспользоваться Runner'ом.
 Бывают текстовый - junit.textui.TestRunner,
 графические версии - junit.swingui.TestRunner, junit.awtui.TestRunner.

 Но чуть более современный метод - это использование класса JUnitCore.
  Добавьте следующий метод main в класс MathFuncTest: